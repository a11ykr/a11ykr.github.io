---
import ResponsiveToggle from './ResponsiveToggle.astro'
import { DarkMode } from 'accessible-astro-components'
import { Image } from 'astro:assets'
// import logo from '../assets/img/logo.svg'
import logo from '../assets/img/a11ykr.png'
---

<div id="main-navigation" class="is-desktop py-8">
  <div class="container">
    <a href="/" class="flex items-center gap-2 !no-underline">
      <Image src={logo} alt="" width="48" height="48" />
      <span class="font-bold">A11YKR</span>
    </a>
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="데스크탑 메뉴">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <DarkMode />
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu" aria-label="모바일 메뉴">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // variables
    const mainNav = document.querySelector('#main-navigation')
    const mainMenu = mainNav.querySelector('ul')
    const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')]

    // functions
    const setActiveMenuItem = () => {
      const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul')
      const currentPathname = window.location.pathname

      // 사이트맵 구조 정의 (각 메뉴 항목에 어떤 경로가 포함되는지)
      const siteStructure = {
        '/': ['/'], // 홈은 홈 경로만 활성화
        '/about': ['/about', '/about/'], // about 페이지와 그 직접 하위 경로
        '/stories': ['/stories', '/stories/'], // stories 페이지와 모든 블로그 포스트
        // 필요시 항목 추가...
      }

      // 특별 케이스: 특정 URL 패턴에 대한 메뉴 매핑
      const specialCases = {
        // 'about-'로 시작하는 URL 패턴은 어떤 메뉴에도 매핑되지 않음
        '/about-': null,
        // 필요한 다른 특별 케이스 추가...
      }

      mobileDesktopMenus.forEach((menu) => {
        const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[]

        // 모든 메뉴 항목 초기화
        menuItems.forEach((item) => {
          item.classList.remove('is-active')
          item.removeAttribute('aria-current')
        })

        // 현재 경로에 맞는 메뉴 항목 찾기
        menuItems.forEach((menuItem) => {
          const menuPath = menuItem.pathname

          // 특별 케이스 먼저 확인
          for (const [pattern, targetMenu] of Object.entries(specialCases)) {
            if (currentPathname.startsWith(pattern)) {
              if (targetMenu === menuPath) {
                menuItem.classList.add('is-active')
                menuItem.setAttribute('aria-current', 'page')
              }
              return // 특별 케이스가 매칭되면 일반 로직은 건너뜀
            }
          }

          // 사이트맵 구조에서 현재 메뉴 항목에 해당하는 패턴 가져오기
          const patterns = siteStructure[menuPath] || []

          // 현재 경로가 이 메뉴 항목의 패턴과 일치하는지 확인
          const isMatch = patterns.some((pattern) => {
            if (pattern.endsWith('/')) {
              return currentPathname.startsWith(pattern)
            } else {
              return currentPathname === pattern
            }
          })

          if (isMatch) {
            menuItem.classList.add('is-active')
            menuItem.setAttribute('aria-current', 'page')
          }
        })
      })
    }

    const checkMenuSize = () => {
      const mainNavWidth = mainNav.getBoundingClientRect().width
      const desktopMenuWidth = document.querySelector('.desktop-menu').getBoundingClientRect().width
      const logoWidthBuffer = 300
      const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer

      if (totalMenuWidth >= mainNavWidth) {
        mainNav.classList.remove('is-desktop')
        mainNav.classList.add('is-mobile')
      } else if (totalMenuWidth <= mainNavWidth) {
        mainNav.classList.add('is-desktop')
        mainNav.classList.remove('is-mobile')
      }
    }

    const isOutOfViewport = (element) => {
      const elementBounds = element.getBoundingClientRect()
      return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth)
    }

    const openDropdownMenu = (dropdownMenu) => {
      const dropdownList = dropdownMenu.parentNode.querySelector('ul')

      dropdownMenu.classList.add('show')
      dropdownMenu.setAttribute('aria-expanded', 'true')

      if (isOutOfViewport(dropdownList)) {
        dropdownList.style.left = 'auto'
      }
    }

    const closeDropdownMenu = (dropdownMenu) => {
      dropdownMenu.classList.remove('show')
      dropdownMenu.setAttribute('aria-expanded', 'false')
    }

    const closeAllDropdownMenus = () => {
      for (let i = 0; i < dropdownMenus.length; i++) {
        closeDropdownMenu(dropdownMenus[i])
      }
    }

    const toggleDropdownMenu = (event) => {
      if (event.target.getAttribute('aria-expanded') === 'false') {
        closeAllDropdownMenus()
        openDropdownMenu(event.target)
      } else {
        closeDropdownMenu(event.target)
      }
    }

    // execution
    mainMenu &&
      mainMenu.addEventListener('keydown', (event) => {
        const element = event.target as Element
        const currentMenuItem = element.closest('li')
        const menuItems = [...mainMenu.querySelectorAll('.menu-item')]
        const currentDropdownMenu = element.closest('.has-dropdown button')
        const currentDropdownMenuItem = element.closest('.has-dropdown li')
        const currentIndex = menuItems.findIndex((item) => item === currentMenuItem)

        const key = event.key
        let targetItem

        if (key === 'ArrowRight') {
          if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
            targetItem = menuItems[0]
          } else {
            targetItem = menuItems[currentIndex + 1]
          }
        }

        if (key === 'ArrowLeft') {
          if (menuItems.indexOf(currentMenuItem) === 0) {
            targetItem = menuItems[menuItems.length - 1]
          } else {
            targetItem = menuItems[currentIndex - 1]
          }
        }

        if (key === 'Escape') {
          targetItem = menuItems[0]
        }

        if (currentDropdownMenu) {
          const firstDropdownItem = currentDropdownMenu.nextElementSibling.querySelector('li')

          if (key === 'ArrowDown') {
            event.preventDefault()
            openDropdownMenu(currentDropdownMenu)
            targetItem = firstDropdownItem
          }

          if (key === 'Escape') {
            closeDropdownMenu(currentDropdownMenu)
          }
        }

        if (currentDropdownMenuItem) {
          const currentDropdownList = currentDropdownMenuItem.parentNode
          const dropdownMenuItems = [...currentDropdownList.querySelectorAll('li')]
          const currentIndex = dropdownMenuItems.findIndex((item) => item === currentDropdownMenuItem)

          if (key === 'ArrowDown') {
            event.preventDefault()

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === dropdownMenuItems.length - 1) {
              targetItem = dropdownMenuItems[0]
            } else {
              targetItem = dropdownMenuItems[currentIndex + 1]
            }
          }

          if (key === 'ArrowUp') {
            event.preventDefault()

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === 0) {
              targetItem = dropdownMenuItems[dropdownMenuItems.length - 1]
            } else {
              targetItem = dropdownMenuItems[currentIndex - 1]
            }
          }

          if (key === 'Escape') {
            const currentDropdownMenu = (currentDropdownList as Element).previousElementSibling
            targetItem = currentDropdownMenu.parentNode
            closeAllDropdownMenus()
          }

          if (key === 'Tab') {
            const currentDropdownMenu = (currentDropdownList as Element).previousElementSibling

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === dropdownMenuItems.length - 1) {
              closeDropdownMenu(currentDropdownMenu)
            }
          }
        }

        if (targetItem) {
          targetItem.querySelector('a, button, input').focus()
        }
      })

    dropdownMenus &&
      dropdownMenus.forEach((dropdownMenu) => {
        dropdownMenu.addEventListener('click', toggleDropdownMenu)
      })

    setActiveMenuItem()
    checkMenuSize()

    window.addEventListener('resize', checkMenuSize)
    window.addEventListener('click', (event) => {
      const element = event.target as Element
      if (!element.hasAttribute('aria-haspopup') && !element.classList.contains('submenu-item')) {
        closeAllDropdownMenus()
      }
    })
  })
</script>

<style lang="scss" is:global>
  @use '../assets/scss/base/breakpoint' as *;
  @use '../assets/scss/base/outline' as *;

  #main-navigation {
    > .container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
    }

    &.is-desktop {
      .desktop-menu {
        position: static;
        visibility: visible;
      }

      .mobile-menu {
        display: none;
      }

      .darkmode-toggle {
        margin-top: -6px;
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu {
        display: none;

        &.show {
          display: block;
        }
      }

      .desktop-menu {
        position: absolute;
        left: 0;
        visibility: hidden;
        z-index: -99;
      }

      .responsive-toggle {
        display: block;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    nav {
      > ul {
        display: flex;
        gap: 1.5rem;
        list-style-type: none;

        a,
        button {
          font-size: 1.125rem;
          line-height: 1.6875rem;
          text-decoration: none;
        }

        a:hover,
        a:focus,
        .is-active,
        .has-dropdown > button:hover,
        .has-dropdown > button:focus {
          text-decoration: underline;
          text-decoration-style: wavy;
          text-decoration-thickness: 1px;
          text-underline-offset: 7px;
        }

        .is-active {
          font-weight: bold;
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      padding: 2rem 0;

      > ul {
        flex-direction: column;

        ul {
          position: relative;
          margin-top: 1rem;
        }
      }

      a,
      button {
        display: block;
        padding: 0.5rem 0;
        width: 100%;
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: -1px;
        border: none;
        padding: 0;
        color: var(--action-color);

        &:hover {
          color: var(--action-color-state);

          &::after {
            border-color: var(--action-color-state);
          }
        }

        &::after {
          transform: rotate(135deg);
          margin-top: -0.25rem;
          border-width: 0.2em 0.2em 0 0;
          border-style: solid;
          border-color: var(--action-color);
          width: 0.85rem;
          height: 0.75em;
          content: '';
        }

        &.show {
          &::after {
            transform: rotate(-45deg);
            margin-top: 0.25rem;
          }

          ~ ul {
            display: flex;
            flex-direction: column;
            gap: 1rem;
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        top: 125%;
        right: 0;
        bottom: auto;
        left: 0;
        z-index: 100;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        border: 2px solid black;
        background-color: var(--neutral-background);
        padding: 1rem;
        min-width: 260px;
      }
    }

    .darkmode-toggle {
      border: none;
      padding: 0;

      .icon {
        margin-top: 4px;
        inline-size: 30px;
        block-size: 30px;
      }

      svg path {
        fill: var(--action-color);
      }

      &:hover {
        box-shadow: none;

        svg path {
          fill: var(--action-color-state);
        }
      }

      &:focus {
        @include outline;

        &:not(:focus-visible) {
          outline: none;
          box-shadow: none;
        }
      }
    }
  }
</style>
